// <auto-generated />
using System;
using LifeQuality.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LifeQuality.DataContext.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231213023948_PreFinalMigration1")]
    partial class PreFinalMigration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LifeQuality.DataContext.Model.BloodAnalysisData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("SensorId");

                    b.ToTable("BloodAnalysisData");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BloodAnalysisData");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Recomendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RecieverId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RecieverId");

                    b.ToTable("Recomendations");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingType")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.CholesterolBloodAnalysisData", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.BloodAnalysisData");

                    b.Property<double>("CholesterolLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("NormalLevelRequirement")
                        .HasColumnType("double precision");

                    b.Property<double>("Triglyceride")
                        .HasColumnType("double precision");

                    b.ToTable("BloodAnalysisData", (string)null);

                    b.HasDiscriminator().HasValue("CholesterolBloodAnalysisData");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.GeneralBloodAnalysisData", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.BloodAnalysisData");

                    b.Property<string>("HCT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HGB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MCV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RBC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WBC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("BloodAnalysisData", (string)null);

                    b.HasDiscriminator().HasValue("GeneralBloodAnalysisData");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.SugarBloodAnalysisData", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.BloodAnalysisData");

                    b.Property<double>("BloodGlucose")
                        .HasColumnType("double precision");

                    b.Property<double>("BloodSugarLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("HbA1c")
                        .HasColumnType("double precision");

                    b.ToTable("BloodAnalysisData", (string)null);

                    b.HasDiscriminator().HasValue("SugarBloodAnalysisData");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Doctor", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.User");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Users", t =>
                        {
                            t.Property("Speciality")
                                .HasColumnName("Doctor_Speciality");
                        });

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Patient", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.User");

                    b.Property<string>("AdditioanlInfo")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientStatus")
                        .HasColumnType("integer");

                    b.Property<int>("PatronId")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatronId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Patron", b =>
                {
                    b.HasBaseType("LifeQuality.DataContext.Model.User");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Patron");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.BloodAnalysisData", b =>
                {
                    b.HasOne("LifeQuality.DataContext.Model.Patient", "Patient")
                        .WithMany("BloodAnalysisDatas")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifeQuality.DataContext.Model.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Recomendation", b =>
                {
                    b.HasOne("LifeQuality.DataContext.Model.BloodAnalysisData", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifeQuality.DataContext.Model.Patient", null)
                        .WithMany("Recomendations")
                        .HasForeignKey("PatientId");

                    b.HasOne("LifeQuality.DataContext.Model.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("Reciever");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Patient", b =>
                {
                    b.HasOne("LifeQuality.DataContext.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifeQuality.DataContext.Model.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patron");
                });

            modelBuilder.Entity("LifeQuality.DataContext.Model.Patient", b =>
                {
                    b.Navigation("BloodAnalysisDatas");

                    b.Navigation("Recomendations");
                });
#pragma warning restore 612, 618
        }
    }
}
